Q:	What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repo with git init, the .git directory is created and
	git is starting to save metadata about that directory - this is what makes
	it a repository, instead of a simple directory. :)

	When running git init, no commit is made. Just a simple, empty repo.

	I need to run git init in order to be able to make commits and enjoy all the
	features of GIT. :)




Q:	How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is different from by working directory by the fact that it
	stores only the files that are to be committed, instead of all the files
	that were changed since the last commit.
	The staging area is different by the repository in the sense that the files
	in it are not yet committed.

	The value it offers is based on the fact that you can choose which files to
	commit and whitch not to - it offers flexibility and freedom of choice. :)




Q:	How can you use the staging area to make sure you have one commit per
logical change?

	If a logical change requires a change in only one file (or only some files),
then the staging area lets you commit only those files - thus, your commits can
be as required ;).



Q:	What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

	Some examples of branching being useful:
	- create a different version of the program, derived from the original one
	- experimenting a feature
	- creating different modes for the program/game, splitting in branches for
	  each mode
	- creating a version for another language. it should be derived from the
	  original version.
	- developing the original version in more different versions which solve
	  different purposes.
